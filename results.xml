<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="7" skipped="0" tests="52" time="40.667" timestamp="2025-05-27T13:54:21.573112+00:00" hostname="fv-az1276-629"><testcase classname="api.tests.UserModelTest" name="test_user_creation" time="1.449" /><testcase classname="api.tests.UserModelTest" name="test_user_default_role" time="0.938" /><testcase classname="api.tests.UserModelTest" name="test_user_str_representation" time="0.934" /><testcase classname="api.tests.UserModelTest" name="test_user_team_membership" time="0.945" /><testcase classname="api.tests.TeamModelTest" name="test_team_creation" time="0.307" /><testcase classname="api.tests.TeamModelTest" name="test_team_str_representation" time="0.306" /><testcase classname="api.tests.UserProfileViewTest" name="test_user_profile_view_authenticated" time="0.350" /><testcase classname="api.tests.UserProfileViewTest" name="test_user_profile_view_unauthenticated" time="0.308" /><testcase classname="api.tests.ProjectAPITests" name="test_create_project_as_owner" time="0.618" /><testcase classname="api.tests.ProjectAPITests" name="test_delete_project_by_non_owner_forbidden" time="0.619" /><testcase classname="api.tests.ProjectAPITests" name="test_delete_project_by_owner" time="0.617" /><testcase classname="api.tests.ProjectAPITests" name="test_list_projects_as_owner" time="0.618"><failure message="AttributeError: 'list' object has no attribute 'get'">self = &lt;api.tests.ProjectAPITests testMethod=test_list_projects_as_owner&gt;

    def test_list_projects_as_owner(self):
        response = self.client.get(self.project_list_url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        response_data = response.json()  # Use .json() for DRF APITestCase
&gt;       self.assertEqual(response_data.get('count'), 2)  # Use .get for safer dict access
E       AttributeError: 'list' object has no attribute 'get'

api/tests.py:139: AttributeError</failure></testcase><testcase classname="api.tests.ProjectAPITests" name="test_partial_update_project_by_owner" time="0.623" /><testcase classname="api.tests.ProjectAPITests" name="test_project_endpoints_unauthenticated" time="0.619" /><testcase classname="api.tests.ProjectAPITests" name="test_project_task_status_chart_by_employee_forbidden" time="0.620"><failure message="AssertionError: 404 != 403">self = &lt;api.tests.ProjectAPITests testMethod=test_project_task_status_chart_by_employee_forbidden&gt;
mock_get_chart_url = &lt;MagicMock name='get_chart_url' id='139721787706736'&gt;

    @patch('api.views.get_chart_url')
    def test_project_task_status_chart_by_employee_forbidden(self, mock_get_chart_url):
        self.client.credentials(HTTP_AUTHORIZATION='Token ' + self.employee_token.key)
        url = reverse('project-task-status-chart', kwargs={'pk': self.project1.pk})
        response = self.client.get(url, format='json')
&gt;       self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
E       AssertionError: 404 != 403

api/tests.py:210: AssertionError</failure></testcase><testcase classname="api.tests.ProjectAPITests" name="test_project_task_status_chart_by_owner" time="0.618" /><testcase classname="api.tests.ProjectAPITests" name="test_project_task_status_chart_unauthenticated" time="0.617" /><testcase classname="api.tests.ProjectAPITests" name="test_project_velocity_chart_by_employee_forbidden" time="0.617"><failure message="AssertionError: 404 != 403">self = &lt;api.tests.ProjectAPITests testMethod=test_project_velocity_chart_by_employee_forbidden&gt;
mock_get_chart_url = &lt;MagicMock name='get_chart_url' id='139721787705392'&gt;

    @patch('api.views.get_chart_url')
    def test_project_velocity_chart_by_employee_forbidden(self, mock_get_chart_url):
        self.client.credentials(HTTP_AUTHORIZATION='Token ' + self.employee_token.key)
        url = reverse('project-velocity-chart', kwargs={'pk': self.project1.pk})
        response = self.client.get(url, format='json')
&gt;       self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
E       AssertionError: 404 != 403

api/tests.py:237: AssertionError</failure></testcase><testcase classname="api.tests.ProjectAPITests" name="test_project_velocity_chart_by_owner" time="0.616" /><testcase classname="api.tests.ProjectAPITests" name="test_project_velocity_chart_unauthenticated" time="0.615" /><testcase classname="api.tests.ProjectAPITests" name="test_retrieve_project_as_owner" time="0.616" /><testcase classname="api.tests.ProjectAPITests" name="test_update_project_by_non_owner_forbidden" time="0.620" /><testcase classname="api.tests.ProjectAPITests" name="test_update_project_by_owner" time="0.626" /><testcase classname="api.tests.TaskAPITests" name="test_create_task_as_authenticated_user" time="0.928" /><testcase classname="api.tests.TaskAPITests" name="test_delete_task_by_assignee" time="0.929" /><testcase classname="api.tests.TaskAPITests" name="test_delete_task_by_other_user_forbidden" time="0.920" /><testcase classname="api.tests.TaskAPITests" name="test_delete_task_by_owner" time="0.921" /><testcase classname="api.tests.TaskAPITests" name="test_list_tasks_as_authenticated_user" time="0.924"><failure message="AttributeError: 'list' object has no attribute 'get'">self = &lt;api.tests.TaskAPITests testMethod=test_list_tasks_as_authenticated_user&gt;

    def test_list_tasks_as_authenticated_user(self):
        response = self.client.get(self.task_list_url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
&gt;       self.assertEqual(response.json().get('count'), 2)
E       AttributeError: 'list' object has no attribute 'get'

api/tests.py:281: AttributeError</failure></testcase><testcase classname="api.tests.TaskAPITests" name="test_retrieve_task_as_assignee" time="0.920" /><testcase classname="api.tests.TaskAPITests" name="test_retrieve_task_as_owner" time="0.922" /><testcase classname="api.tests.TaskAPITests" name="test_task_action_mark_as_done_by_owner_of_task_assigned_to_owner" time="0.926" /><testcase classname="api.tests.TaskAPITests" name="test_task_action_start_progress_by_assignee" time="0.920" /><testcase classname="api.tests.TaskAPITests" name="test_task_endpoints_unauthenticated" time="0.920" /><testcase classname="api.tests.TaskAPITests" name="test_task_filter_by_status_as_owner" time="0.922"><failure message="AttributeError: 'list' object has no attribute 'get'">self = &lt;api.tests.TaskAPITests testMethod=test_task_filter_by_status_as_owner&gt;

    def test_task_filter_by_status_as_owner(self):
        response = self.client.get(self.task_list_url + '?status=TODO', format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        # Assuming owner can see task1 (assigned to 'assignee')
        # This depends on the default queryset of TaskViewSet, which is Task.objects.all()
        # If filtering by assignee or project ownership is applied at queryset level for list, this might change
        data = response.json()
&gt;       self.assertEqual(data.get('count'), 1)  # task1 is TODO
E       AttributeError: 'list' object has no attribute 'get'

api/tests.py:362: AttributeError</failure></testcase><testcase classname="api.tests.TaskAPITests" name="test_update_task_by_assignee" time="0.929" /><testcase classname="api.tests.TaskAPITests" name="test_update_task_by_other_user_forbidden" time="0.956" /><testcase classname="api.tests.TaskAPITests" name="test_update_task_by_owner" time="0.932" /><testcase classname="api.tests.ChartViewTests" name="test_business_statistics_story_points_monthly" time="0.624" /><testcase classname="api.tests.ChartViewTests" name="test_project_task_status_chart_as_owner" time="0.617" /><testcase classname="api.tests.ChartViewTests" name="test_project_task_status_chart_no_tasks" time="0.921" /><testcase classname="api.tests.ChartViewTests" name="test_project_velocity_chart_as_owner" time="0.619" /><testcase classname="api.tests.ChartViewTests" name="test_user_personal_task_stats_for_assignee" time="0.615" /><testcase classname="api.tests.ChartViewTests" name="test_user_personal_task_stats_for_owner" time="0.617" /><testcase classname="api.tests.WorkLogAPITests" name="test_create_worklog_for_task_as_loguser1" time="0.921" /><testcase classname="api.tests.WorkLogAPITests" name="test_create_worklog_unauthenticated" time="0.917" /><testcase classname="api.tests.WorkLogAPITests" name="test_delete_own_worklog_as_loguser1" time="0.919" /><testcase classname="api.tests.WorkLogAPITests" name="test_list_all_worklogs_as_admin" time="0.922"><failure message="AttributeError: 'list' object has no attribute 'get'">self = &lt;api.tests.WorkLogAPITests testMethod=test_list_all_worklogs_as_admin&gt;

    def test_list_all_worklogs_as_admin(self):
        self.client.credentials(HTTP_AUTHORIZATION='Token ' + self.admin_token.key)
        # Create another worklog by admin to make it 2 total
        WorkLog.objects.create(user=self.admin_user, project=self.project, date=timezone.now().date(),
                               hours_spent='1.00')
        response = self.client.get(self.list_create_url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
&gt;       self.assertEqual(response.json().get('count'), 2)
E       AttributeError: 'list' object has no attribute 'get'

api/tests.py:555: AttributeError</failure></testcase><testcase classname="api.tests.WorkLogAPITests" name="test_list_own_worklogs_as_loguser1" time="0.920"><failure message="AttributeError: 'list' object has no attribute 'get'">self = &lt;api.tests.WorkLogAPITests testMethod=test_list_own_worklogs_as_loguser1&gt;

    def test_list_own_worklogs_as_loguser1(self):
        response = self.client.get(self.list_create_url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
&gt;       self.assertEqual(response.json().get('count'), 1)
E       AttributeError: 'list' object has no attribute 'get'

api/tests.py:545: AttributeError</failure></testcase><testcase classname="api.tests.WorkLogAPITests" name="test_retrieve_others_worklog_as_loguser1_not_found" time="0.916" /><testcase classname="api.tests.WorkLogAPITests" name="test_retrieve_own_worklog_as_loguser1" time="0.922" /><testcase classname="api.tests.WorkLogAPITests" name="test_update_others_worklog_as_loguser1_forbidden" time="0.969" /><testcase classname="api.tests.WorkLogAPITests" name="test_update_own_worklog_as_loguser1" time="0.941" /></testsuite></testsuites>